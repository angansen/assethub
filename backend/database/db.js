const oracledb = require('oracledb');
const Promise = require('promise');
var SimpleOracleDB = require('simple-oracledb');
let _db;
SimpleOracleDB.extend(oracledb);
let pooldb;


// /SQL> exit
// Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
// Version 19.8.0.0.0
// [oracle@db1-s ~]$ cd $ORACLE_HOME
// [oracle@db1-s dbhome_1]$ cd network/
// [oracle@db1-s network]$ cd admin/
// [oracle@db1-s admin]$ cat tnsnames.ora
// # tnsnames.ora Network Configuration File: /u01/app/oracle/product/19.0.0.0/dbhome_1/network/admin/tnsnames.ora
// # Generated by Oracle configuration tools.

// AH01S_IAD3RP =
//   (DESCRIPTION =
//     (ADDRESS = (PROTOCOL = TCP)(HOST = db1-s)(PORT = 1521))
//     (CONNECT_DATA =
//       (SERVER = DEDICATED)
//       (SERVICE_NAME = ah01s_iad3rp.sb3.ahvcn.oraclevcn.com)
//     )
//   )

// LISTENER_AH01S =
//   (ADDRESS = (PROTOCOL = TCP)(HOST = db1-s)(PORT = 1521))

// pah01s =
//   (DESCRIPTION =
//     (ADDRESS = (PROTOCOL = TCP)(HOST = db1-s)(PORT = 1521))
//     (CONNECT_DATA =
//       (SERVER = DEDICATED)
//       (SERVICE_NAME = pah01s.sb3.ahvcn.oraclevcn.com)
//     )
//   )

// Staging Server IP address: 150.136.254.222
// DB Server Node:  10.0.3.3
// ssh -i axp_oci_ssh opc@150.136.254.222
// [opc@ah-staging-01 ~]$ cd .ssh
// [opc@ah-staging-01 .ssh]$ ls
// ah_db_stg_ssh  ah_db_stg_ssh.pub  authorized_keys  known_hosts
// [opc@ah-staging-01 .ssh]$ ssh -i ah_db_stg_ssh opc@10.0.3.3
// Last login: Thu Sep 24 16:28:11 2020 from 10.0.2.31
// [opc@db1-s ~]$
// 11:00


// +++++++++++++++++++++++++++++++++++++++




// Production:   158.101.119.42
// Production DB node:  10.0.3.2
// Production Server:
// Deploy Server IP: 158.101.119.42
// Database DB Node: 10.0.3.2
// ssh -i axp_oci_ssh opc@158.101.119.42
// cd .ssh
// [opc@ah-deploy-01 .ssh]$ ls -l
// -rw------- 1 opc opc 1675 Sep 24 16:43 ah_db_ssh
// -rw-r--r-- 1 opc opc 398 Sep 24 16:43 ah_db_ssh.pub
// [opc@ah-deploy-01 .ssh]$ ssh -i ah_db_ssh opc@10.0.3.2
// Last login: Thu Sep 24 18:12:27 2020 from 10.0.2.32
// [opc@db1 ~]$


const Dbconnect = () => {

	const dbAttr = {


		// *** DEV DB2 CRED ***
		// user: "system",
		// password: "AssetHub#19_",
		// connectString: "db2.sb6.ah.oraclevcn.com:1521/ah01_iad353.sb6.ah.oraclevcn.com"


		//// *** DEV DB1 CRED ***
		// user: "system",
		// password: "AssetHub#19_",
		// connectString: "db1.sb6.ah.oraclevcn.com:1521/ah01_iad3kb.sb6.ah.oraclevcn.com"

		//// *** PROD DB CRED ***
		// user: "assethub",
		// password: "AssetHub#19_",
		// connectString: "db1.sb5.ahvcn.oraclevcn.com:1521/ah01_iad2gm.sb5.ahvcn.oraclevcn.com"
	}
	return new Promise((resolve, reject) => {
		oracledb.getConnection(dbAttr)
			.then(connection => {
				_db = connection;
				resolve('DB connecion verified. . .');
			})
			.catch((err) => {
				console.log(err)
			})
	})

}

async function getpoolconnection() {

	JSON.stringify()
	let dbconnparam = {
		// *** DEV DB CRED ***
		// user: "assethub",
		// password: "AssetHub#19_",
		// connectString: "db1.sb6.ah.oraclevcn.com:1521/pah1.sb6.ah.oraclevcn.com",

		// *** STAGING DB CRED ***
		user: "assethub",
		password: "Asset_Hub#20",
		connectString: "db1-s.sb3.ahvcn.oraclevcn.com:1521/pah01s.sb3.ahvcn.oraclevcn.com",


		//// *** PROD DB CRED ***
		// user: "assethub",
		// password: "AssetHub#19_",
		// connectString: "db1.sb3.ahvcn.oraclevcn.com:1521/pah1.sb3.ahvcn.oraclevcn.com",
		_enableStats: true,
		poolMax: 150,
		poolMin: 2,
		poolIncrement: 5,
		poolTimeout: 4
	}
	//SELECT count(username) FROM dba_users;
	return new Promise((resolve, reject) => {
		oracledb.createPool(dbconnparam,
			(err, pool) => {
				if (err) {
					console.log(
						"ERROR: ",
						new Date(),
						": createPool() callback: " + err.message
					);
					return;
				}
				pooldb = pool;

				resolve("Pool db connection created");
			}
		);
	})
}

// async function getpooldb() {
// 	if (!_db) {
// 		_db = await pooldb.getConnection();
// 		// console.log("got connection");
// 	}
// 	if (_db) {
// 		// console.log("Found connection, returning . . .")
// 		return _db;
// 	}
// }


const getpooldb = () => {
	if (!_db) {
		return new Promise((resolve, reject) => {
			// console.log("Open connection > " + pooldb.connectionsOpen+" / "+pooldb.connectionsInUse);
			pooldb.getConnection().then(result => {

				_db = result;
				// console.log("got connection");	
				resolve(_db);
			});
		})


	}

	if (_db) {
		// console.log("Found Open connection > " + pooldb.connectionsOpen+" / "+pooldb.connectionsInUse);
		return _db;
	}
}



const getDb = () => {
	if (!_db) {
		// return _db;
		Dbconnect().then(result => {
			return _db;
		})
	}
	if (_db) {
		return _db;
	}
}


const doRelease = (connection) => {
	let c = connection;
	return new Promise((resolve, reject) => {
		c.release().then(res => {
			resolve("released")
		}).catch(err => {
			resolve(err)
		})
	})

}


module.exports = {
	Dbconnect: getpoolconnection,
	getDb: getpooldb,
	getpooldb: getpooldb,
	doRelease: doRelease
};